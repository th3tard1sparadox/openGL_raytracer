* Question Section 1
** Where is the origin placed in the on-screen coordinate system?
   The origin is in the middle.
** Which direction are the X and Y axes pointing in the on-screen coordinate system?
   The direction of x is to the right and y is up.
** The triangle color is controlled from the fragment shader. Would it be possible to control it from the main program? How?
   We could input it as an uniform variable.
* Question Section 2
** What is the purpose of the "in", "out" and "uniform" modifiers?
   *In* acts like input, *Out* acts like output and *uniform* are
    global variables.
** What is the output of the fragment shader?
   The output is the color of each pixel.
** What does the function glUniformMatrix4fv do?
   Sends the uniform matrix to the variable in the shaders.
* Question Section 3
** What is the frame rate of the animation?
   About 60.
* Question Section 4
** Did you need to do anything different when uploading the color data?
   We entered it as an input (IN) variable.
** The "in" and "out" modifiers are now used for something different. What?
   They act as an input output relay from the vertex to the fragment
   shader.
* Question Section 5
** What problems did you encounter while building the pyramid?
   We entered the vertices in the wrong order. And we also entered the
   triangles in the incorrect order.
** How do you change the facing of a polygon?
   We entred the vertices in the opposite direction.
* Question Section 6
** Why do we need normal vectors for a model?
   Lighting - Same source as drawing order.
** What did you do in your fragment shader?
   We added basic color based the normals.
** Should a normal vector always be perpendicular to a certain triangle? If not, why?
   No because it can be placed on vertices, like the top of a pyramid
   where it should act as the average of all the adjacent triangles
   normal vectors.
** Now we are using glBindBuffer and glBufferData again. They deal with buffers, but in what way?
   glBindBuffer binds the bunny to the buffer while glBufferData binds
   the bunny vertices to the buffer.
